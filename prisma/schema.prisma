// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             String           @id @default(uuid())
  fullname       String
  password       String
  phone          String
  email          String
  createdAt      DateTime         @default(now()) @map("created_at")
  employee       Employees?
  accounts       Accounts[]
  supportRequest SupportRequest[]
  chat           Chat[]

  @@map("users")
}

model Employees {
  id         String   @id @default(uuid())
  userId     String   @unique @map("user_id")
  position   String
  department String
  hireDate   DateTime @default(now()) @map("hire_date")
  isActive   Boolean  @map("is_active")

  user           Users            @relation(fields: [userId], references: [id])
  supportRequest SupportRequest[]
  chat           Chat[]

  @@map("employees")
}

model Accounts {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  accountNumber String   @unique @map("account_number")
  balance       Decimal  @default(0.00)
  currency      String
  openedDate    DateTime
  isActive      Boolean  @default(true) @map("is_active")

  user         Users          @relation(fields: [userId], references: [id])
  cards        Cards[]
  transactions Transactions[]
  payments     Payments[]

  @@map("accounts")
}

model Cards {
  id         String   @id @default(uuid())
  accountId  String   @map("account_id")
  cardNumber String   @map("card_number")
  cardType   String   @map("card_type")
  expireDate DateTime @map("expire_date")
  cvv        String
  issuedDate DateTime @map("issued_date")
  isActive   Boolean  @map("is_active")
  dailyLimit DateTime @map("daily_limit")

  account      Accounts       @relation(fields: [accountId], references: [id])
  transactions Transactions[]

  @@map("cards")
}

model Transactions {
  id          String   @id @default(uuid())
  accountId   String   @map("account_id")
  cardId      String?  @map("card_id")
  amount      Decimal
  currency    String   @default("RUB")
  type        String
  status      String   @default("pending")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  merchant    String?

  account Accounts @relation(fields: [accountId], references: [id])
  card    Cards?   @relation(fields: [cardId], references: [id])

  @@map("transactions")
}

model Payments {
  id          String    @id @default(uuid())
  accountId   String    @map("account_id")
  amount      Decimal
  paymentType String    @map("payment_type")
  provider    String
  status      String    @default("pending")
  createdAt   DateTime  @default(now()) @map("created_at")
  completedAt DateTime? @map("completed_at")

  account Accounts @relation(fields: [accountId], references: [id])

  @@map("payments")
}

model SupportRequest {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  employeeId  String?   @map("employee_id")
  subject     String
  description String
  status      String    @default("open") // "open", "in_progress", "closed"
  priority    String    @default("medium") // "low", "medium", "high"
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  closedAt    DateTime? @map("closed_at")

  user        Users      @relation(fields: [userId], references: [id])
  employee    Employees? @relation(fields: [employeeId], references: [id])
  chat        Chat?
  employeesId String?

  @@map("support_requests")
}

model Chat {
  id            String    @id @default(uuid())
  requestId     String    @unique @map("request_id")
  userId        String    @map("user_id")
  employeeId    String?   @map("employee_id")
  lastMessageAt DateTime? @map("last_message_at")
  isActive      Boolean   @default(true) @map("is_active")

  supportRequest SupportRequest @relation(fields: [requestId], references: [id])
  user           Users          @relation(fields: [userId], references: [id])
  employee       Employees?     @relation(fields: [employeeId], references: [id])
  messages       Message[]
  usersId        String?
  employeesId    String?

  @@map("chats")
}

model Message {
  id         String   @id @default(uuid())
  chatId     String   @map("chat_id")
  senderType String   @map("sender_type")
  content    String
  sentAt     DateTime @default(now()) @map("sent_at")
  isRead     Boolean  @default(false) @map("is_read")

  chat Chat @relation(fields: [chatId], references: [id])

  @@map("messages")
}
